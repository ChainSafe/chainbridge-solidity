// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ERC20ProposalExecuted extends ethereum.Event {
  get params(): ERC20ProposalExecuted__Params {
    return new ERC20ProposalExecuted__Params(this);
  }
}

export class ERC20ProposalExecuted__Params {
  _event: ERC20ProposalExecuted;

  constructor(event: ERC20ProposalExecuted) {
    this._event = event;
  }

  get recipientAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get resourceID(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ERC20Handler___depositRecordsResult {
  value0: Address;
  value1: i32;
  value2: i32;
  value3: Bytes;
  value4: Bytes;
  value5: Address;
  value6: BigInt;

  constructor(
    value0: Address,
    value1: i32,
    value2: i32,
    value3: Bytes,
    value4: Bytes,
    value5: Address,
    value6: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    map.set("value3", ethereum.Value.fromFixedBytes(this.value3));
    map.set("value4", ethereum.Value.fromBytes(this.value4));
    map.set("value5", ethereum.Value.fromAddress(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    return map;
  }
}

export class ERC20Handler__getDepositRecordResultValue0Struct extends ethereum.Tuple {
  get _tokenAddress(): Address {
    return this[0].toAddress();
  }

  get _lenDestinationRecipientAddress(): i32 {
    return this[1].toI32();
  }

  get _destinationChainID(): i32 {
    return this[2].toI32();
  }

  get _resourceID(): Bytes {
    return this[3].toBytes();
  }

  get _destinationRecipientAddress(): Bytes {
    return this[4].toBytes();
  }

  get _depositer(): Address {
    return this[5].toAddress();
  }

  get _amount(): BigInt {
    return this[6].toBigInt();
  }
}

export class ERC20Handler extends ethereum.SmartContract {
  static bind(address: Address): ERC20Handler {
    return new ERC20Handler("ERC20Handler", address);
  }

  _bridgeAddress(): Address {
    let result = super.call("_bridgeAddress", "_bridgeAddress():(address)", []);

    return result[0].toAddress();
  }

  try__bridgeAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "_bridgeAddress",
      "_bridgeAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _burnList(param0: Address): boolean {
    let result = super.call("_burnList", "_burnList(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try__burnList(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("_burnList", "_burnList(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  _contractWhitelist(param0: Address): boolean {
    let result = super.call(
      "_contractWhitelist",
      "_contractWhitelist(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try__contractWhitelist(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "_contractWhitelist",
      "_contractWhitelist(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  _depositRecords(
    param0: i32,
    param1: BigInt
  ): ERC20Handler___depositRecordsResult {
    let result = super.call(
      "_depositRecords",
      "_depositRecords(uint8,uint64):(address,uint8,uint8,bytes32,bytes,address,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0)),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new ERC20Handler___depositRecordsResult(
      result[0].toAddress(),
      result[1].toI32(),
      result[2].toI32(),
      result[3].toBytes(),
      result[4].toBytes(),
      result[5].toAddress(),
      result[6].toBigInt()
    );
  }

  try__depositRecords(
    param0: i32,
    param1: BigInt
  ): ethereum.CallResult<ERC20Handler___depositRecordsResult> {
    let result = super.tryCall(
      "_depositRecords",
      "_depositRecords(uint8,uint64):(address,uint8,uint8,bytes32,bytes,address,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0)),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ERC20Handler___depositRecordsResult(
        value[0].toAddress(),
        value[1].toI32(),
        value[2].toI32(),
        value[3].toBytes(),
        value[4].toBytes(),
        value[5].toAddress(),
        value[6].toBigInt()
      )
    );
  }

  _resourceIDToTokenContractAddress(param0: Bytes): Address {
    let result = super.call(
      "_resourceIDToTokenContractAddress",
      "_resourceIDToTokenContractAddress(bytes32):(address)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return result[0].toAddress();
  }

  try__resourceIDToTokenContractAddress(
    param0: Bytes
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "_resourceIDToTokenContractAddress",
      "_resourceIDToTokenContractAddress(bytes32):(address)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _tokenContractAddressToResourceID(param0: Address): Bytes {
    let result = super.call(
      "_tokenContractAddressToResourceID",
      "_tokenContractAddressToResourceID(address):(bytes32)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBytes();
  }

  try__tokenContractAddressToResourceID(
    param0: Address
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "_tokenContractAddressToResourceID",
      "_tokenContractAddressToResourceID(address):(bytes32)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getDepositRecord(
    depositNonce: BigInt,
    destId: i32
  ): ERC20Handler__getDepositRecordResultValue0Struct {
    let result = super.call(
      "getDepositRecord",
      "getDepositRecord(uint64,uint8):((address,uint8,uint8,bytes32,bytes,address,uint256))",
      [
        ethereum.Value.fromUnsignedBigInt(depositNonce),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(destId))
      ]
    );

    return changetype<ERC20Handler__getDepositRecordResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getDepositRecord(
    depositNonce: BigInt,
    destId: i32
  ): ethereum.CallResult<ERC20Handler__getDepositRecordResultValue0Struct> {
    let result = super.tryCall(
      "getDepositRecord",
      "getDepositRecord(uint64,uint8):((address,uint8,uint8,bytes32,bytes,address,uint256))",
      [
        ethereum.Value.fromUnsignedBigInt(depositNonce),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(destId))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<ERC20Handler__getDepositRecordResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get bridgeAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get initialResourceIDs(): Array<Bytes> {
    return this._call.inputValues[1].value.toBytesArray();
  }

  get initialContractAddresses(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }

  get burnableContractAddresses(): Array<Address> {
    return this._call.inputValues[3].value.toAddressArray();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class FundERC20Call extends ethereum.Call {
  get inputs(): FundERC20Call__Inputs {
    return new FundERC20Call__Inputs(this);
  }

  get outputs(): FundERC20Call__Outputs {
    return new FundERC20Call__Outputs(this);
  }
}

export class FundERC20Call__Inputs {
  _call: FundERC20Call;

  constructor(call: FundERC20Call) {
    this._call = call;
  }

  get tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get owner(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class FundERC20Call__Outputs {
  _call: FundERC20Call;

  constructor(call: FundERC20Call) {
    this._call = call;
  }
}

export class SetBurnableCall extends ethereum.Call {
  get inputs(): SetBurnableCall__Inputs {
    return new SetBurnableCall__Inputs(this);
  }

  get outputs(): SetBurnableCall__Outputs {
    return new SetBurnableCall__Outputs(this);
  }
}

export class SetBurnableCall__Inputs {
  _call: SetBurnableCall;

  constructor(call: SetBurnableCall) {
    this._call = call;
  }

  get contractAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetBurnableCall__Outputs {
  _call: SetBurnableCall;

  constructor(call: SetBurnableCall) {
    this._call = call;
  }
}

export class SetResourceCall extends ethereum.Call {
  get inputs(): SetResourceCall__Inputs {
    return new SetResourceCall__Inputs(this);
  }

  get outputs(): SetResourceCall__Outputs {
    return new SetResourceCall__Outputs(this);
  }
}

export class SetResourceCall__Inputs {
  _call: SetResourceCall;

  constructor(call: SetResourceCall) {
    this._call = call;
  }

  get resourceID(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get contractAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetResourceCall__Outputs {
  _call: SetResourceCall;

  constructor(call: SetResourceCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get resourceID(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get destinationChainID(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get depositNonce(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get depositer(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class ExecuteProposalCall extends ethereum.Call {
  get inputs(): ExecuteProposalCall__Inputs {
    return new ExecuteProposalCall__Inputs(this);
  }

  get outputs(): ExecuteProposalCall__Outputs {
    return new ExecuteProposalCall__Outputs(this);
  }
}

export class ExecuteProposalCall__Inputs {
  _call: ExecuteProposalCall;

  constructor(call: ExecuteProposalCall) {
    this._call = call;
  }

  get resourceID(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class ExecuteProposalCall__Outputs {
  _call: ExecuteProposalCall;

  constructor(call: ExecuteProposalCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
